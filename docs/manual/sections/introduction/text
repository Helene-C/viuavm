\section{begin}

Viua VM is a register based VM (what is a register is explained in section \ref{registers}).

\heading{PROGRAMMING MODEL}{ref=programming_model}
\section{begin}

A program running on Viua is modelled as a set of communicating processes running in parallel.
Each process runs a function, and a function is a sequence of instructions.
Every instruction advances the execution of the program by manipulating values placed in registers.

\heading{REGISTERS}{ref=registers}
\section{begin}

\heading{A REGISTER}
\section{begin}

A register is a container for a single value of any type representable by a Viua VM program, either
simple (e.g. an integer, a boolean) or compound (e.g. a vector, a struct).

An instruction can access registers to get its inputs and set its outputs.
For example, the \instruction{add} instruction gets two inputs (`rhs` and `lhs`) and
sets a single output (`output`):

\indent{}
\reflow{off}
add %output local %lhs local %rhs local
\reflow{on}
\dedent{}
\break

A register belongs to one of available register sets.

%% A REGISTER
\section{end}

\heading{REGISTER SETS}
\section{begin}

Registers are grouped in register sets.
Register sets are allocated per-process.
Processes do not share any registers, and can only exchange values using message passing.

Register sets are divided into two main groups: direct access, and control-oriented access.

\heading{DIRECT ACCESS REGISTER SETS}
\section{begin}

A register in a direct access register set can be used directly by any instruction.
An instruction can freely mix the register sets it uses for its operands.
As an example, the following instruction will add
an integer from local register 1
to an integer from static register 2
and store the result in global register 3.

\indent{}
\reflow{off}
add %3 global %2 static %1 local
\reflow{on}
\dedent{}
\break

This manual assumes a certain style of referring to registers.
Whenever "local register N" is written it means "N-th register of the local register set".

A register in a direct access register set is accessed using its index.
A register index is an unsigned integer.
Valid register indexes start with zero (0) and end with K, where K is the size of the register
set to be accessed minus 1.
For example, for a local register set with size 16 valid indexes span from 0 to 15.

\heading{GLOBAL REGISTER SET}
\section{begin}

Global register set is allocated per-process.
It is accessible from any call frame inside a process.
Global register set is shared between all call stacks inside a process.

\heading{LIFETIME}

Global register set is allocated when a process is spawned, before the process begins execution.

It is deallocated after the process finishes execution (either normally, or due to being killed by a runaway
exception).
Contents of the global register set are destructed in order, beginning with values in the lowest-indexed
registers (i.e. the value in global register 1 is destructed before the value in global register 2, etc.).

%% GLOBAL REGISTER SET
\section{end}

\heading{STATIC REGISTER SET}
\section{begin}

Static register set is allocated per-function per-process.
It is accessible only for the function that requested it (i.e. function f cannot access
static register set of function g).
Static register sets are shared between all call stacks inside a process.

\heading{LIFETIME}

Static register set is allocated when a function first requests it.
Currently (2018-03-07), this means that it is allocated on first access to a register from the static register
set.

It is deallocated after the process in which it was allocated finishes execution.
Contents of a static register set are destructed in order, beginning with values in the lowest-indexed
registers (i.e. the value in static register 1 is destructed before the value in static register 2, etc.).
It is unspecified (as of 2018-03-07) whether static register sets are deallocated before or after the global
register set.

\heading{NOTES}

Functions are responsible for setting up their static register sets.
Since any call to a function may be the first one, access to static registers should
be guarded by the \instruction{isnull} instruction (described in section
\ref{opcode:isnull}).

%% STATIC REGISTER SET
\section{end}

\heading{LOCAL REGISTER SET}
\section{begin}

A local register set is allocated whenever:

\list{begin}
\item
a function call is made (using the \instruction{call} instruction, described in section
\ref{opcode:call})
\item
a process is spawned (using the \instruction{process} instruction, described in section
\ref{opcode:process})
\item
a deferred call is scheduled (using the \instruction{defer} instruction, described in section
\ref{opcode:defer})
\item
a closure is created (using the \instruction{closure} instruction, described in section
\ref{opcode:closure})
\list{end}

A local register set is accessible only inside a single call frame.
This usually means that it is accessible only for the duration of a single function call, with the exception
of local register sets allocated for closures.

Since closures can be called many times their local register sets must persist between calls.
This makes them similar to static registers, but scoped only to a single closure instance.

Tail calls (facilitated by the \instruction{tailcall} instruction, described in section
\ref{opcode:tailcall}) do not "inherit" the contents of caller's local register set.

%% LOCAL REGISTER SET
\section{end}

%% DIRECT ACCESS REGISTER SETS
\section{end}

\heading{CONTROL-ORIENTED REGISTER SETS}
\section{begin}

A value placed in a control oriented register set is not directly accessible.
It must be moved to a direct access register set before it can be used.

\heading{MESSAGE QUEUE}

Message queue is allocated per-process.
It is accessible from all call frames, and all stacks of a process (similarly to a global register set).

The message queue of a process contains an ordered sequence of the messages that this process received.
The first message in the queue can be popped using the \instruction{receive} instruction described in section
\ref{opcode:receive}.
The following example puts the first value in the queue in local register 1, or throws an exception if no
value is available after 1 second.

\indent{}
\wrap{begin}
receive %1 local 1s
\wrap{end}
\dedent{}
\break

The size of the message queue is theoretically unbounded.
When a message is delievered to a process it is put into its message queue (or: mailbox), increasing the size
of the queue.
When a message is received by the process it is popped from its mailbox, decreasing mailbox's size.

\heading{EXCEPTION REGISTER}{ref=register_sets.exception_register}

Exception register is allocated per-stack per-process.
It is accessible from all call frames of a stack.

Exception register is set using the \instruction{throw} instruction.
A value can be fetched from the exception register using the \instruction{draw} instruction.


%% CONTROL-ORIENTED REGISTER SETS
\section{end}

%% REGISTER SETS
\section{end}

\heading{FETCH MODES}{ref=programming_model.registers.fetch_modes}
\section{begin}

A value is fetched from a register using of three available modes:

\list{begin}
\item
direct
\item
pointer dereference
\item
register indirect
\list{end}

\heading{DIRECT}
\section{begin}

%% DIRECT
\section{end}

\heading{POINTER DEREFERENCE}
\section{begin}

%% POINTER DEREFERENCE
\section{end}

\heading{REGISTER INDIRECT}
\section{begin}

%% REGISTER INDIRECT
\section{end}

%% FETCH MODES
\section{end}

%% REGISTERS
\section{end}

%% PROGRAMMING MODEL
\section{end}

\heading{FETCH MODES (OLD)}
\section{begin}

Values can be fetched from registers in three modes: 1/ direct, 2/ pointer dereference, and
3/ register indirect.

\heading{DIRECT}
\section{begin}

Direct, or plain, mode is identified by a '%' sign.
A value is fetched from a register with the index specified after the '%' sign.
For example, below code will increment a value located in local register 2:

\reflow{off}
\indent{4}
integer %2 local 42
iinc %2 local
\dedent{4}
\break
\reflow{on}
\section{end}

\heading{POINTER DEREFERENCE}
\section{begin}

Pointer dereference mode (identified by '*' sign) will fetch a value that is pointed to by the pointer
located in the register with the index specified after the '*' sign.
For example, below code will increment a value pointed to by the pointer in local register 2:

\reflow{off}
\indent{4}
integer %3 local 42
ptr %2 local %3 local
iinc *2 local
\dedent{4}
\break
\reflow{on}
\section{end}

\heading{REGISTER INDIRECT}
\section{begin}

Register indirect mode (identified by '@' sign) will fetch a value from a register with index specified by the
integer located in register with the index specified after the '@' sign.
For example, below code will increment a value in local register 2:

\reflow{off}
\indent{4}
integer %2 local 42
integer %3 local 2
iinc @3 local
\dedent{4}
\reflow{on}
\break

\section{end}
\section{end}

\heading{REGISTER ADDRESSING}
\section{begin}

To fetch or store a value in a register it needs to be addressed.
A proper register address consists of a fetch mode, a register index, and a register set.
For example:

\reflow{off}
\indent{4}
%1 local
*1 local
@1 local

%1 static
*1 static
@1 static

%1 global
*1 global
@1 global
\dedent{4}
\reflow{on}
\break

are all valid register addresses, conforming to the general syntax:
\break
<fetch-mode> <index> <register-set-specifier>

Mixing fetch modes and register sets in single instructions is allowed.
For exampe, this code:

\reflow{off}
\indent{4}
copy %1 static *1 local
\dedent{4}
\reflow{on}
\break

will copy a value dereferenced from a pointer located in local register 1 into static register 1.

\section{end}

%% INTRODUCTION
\section{end}

%% vim:set ft=tex:
