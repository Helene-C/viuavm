\section{begin}

Viua VM is a register based VM (what is a register is explained in section \ref{registers}).

\heading{PROGRAMMING MODEL}{ref=programming_model}
\section{begin}

A program running on Viua is modelled as a set of communicating processes running in parallel.
Each process runs a function, and a function is a sequence of instructions.
Every instruction advances the execution of the program by manipulating values placed in registers.

\heading{REGISTERS}{ref=registers}
\section{begin}

\heading{A REGISTER}
\section{begin}


A register is a container for a value.

%% A REGISTER
\section{end}

\heading{REGISTER SETS}
\section{begin}

\heading{DIRECT ACCESS REGISTER SETS}
\section{begin}

\heading{GLOBAL REGISTER SET}

\heading{STATIC REGISTER SET}

\heading{LOCAL REGISTER SET}

%% DIRECT ACCESS REGISTER SETS
\section{end}

\heading{CONTROL-ORIENTED REGISTER SETS}
\section{begin}

\heading{PROCESS' MESSAGE QUEUE}

\heading{EXCEPTION REGISTER}

%% CONTROL-ORIENTED REGISTER SETS
\section{end}

%% REGISTER SETS
\section{end}

%% REGISTERS
\section{end}

%% PROGRAMMING MODEL
\section{end}

\heading{REGISTER SETS}
\section{begin}

There are three main register sets:
\reflow{off}

- local
- static
- global
\reflow{on}

Values that are placed in registers from these register sets can be accessed by any instruction.

There are alse two special register sets:
\reflow{off}

- process message queue
- exception register (a.k.a. "caught slot")
\reflow{on}

Values that are placed in these registers must be moved into a register from one of the main register sets
before they can be manipulated.
Use \instruction{receive} instruction to get values out of the process message queue, and use
\instruction{draw} instruction to get values out of the exception register (after an exception is caught).

All register sets are local to their processes.
No values are shared between processes - sending a value to another process makes a copy.

\heading{LOCAL REGISTER SET}
\section{begin}

Local register set is bound to a call frame, or a closure, and exists for as long as the entity it is bound to
exists.
Local register set that is bound to a call frame is discarded when that frame is dropped from the stack.
Local register set that is bound to a closure is discarded when that closure is discarded.

\heading{CAPACITY}
\section{begin}

Capacity of each local register set may be different (it depends on the number of registers requested when
either a frame or a closure containing the local register set is created).
The capacity is limited to 2^32 registers.
\section{end}

\heading{NOTES}
\section{begin}

Tail calls do not inherit local register set.
In Viua, tail calls replace instead of reusing the last call frame (meaning that the size of the last frame
can change) so the register set is created anew.

\section{end}
\section{end}

\heading{STATIC REGISTER SET}
\section{begin}

Static register set is bound to a function in a process.
The same function in two different processes has two different static register sets.
Static register set is discarded when the process it is bound to finishes execution.
The order in which static register sets for different functions are discarded after a process finishes
execution is random.

\heading{CAPACITY}
\section{begin}

Currently (2018-01-02) fixed at 16 registers.

\section{end}

\heading{NOTES}
\section{begin}

Functions are responsible for setting up their static registers.
Any call to a function may be the first one, so access to static registers should be guarded by
\instruction{isnull} instruction.

\section{end}
\section{end}

\heading{GLOBAL REGISTER SET}
\section{begin}

Global register set is bound to a process.
It is accessible from all call frames of this process.
It is discarded when the process it is bound to finishes execution.

\section{end}
\section{end}

\heading{FETCH MODES}
\section{begin}

Values can be fetched from registers in three modes: 1/ direct, 2/ pointer dereference, and
3/ register indirect.

\heading{DIRECT}
\section{begin}

Direct, or plain, mode is identified by a '%' sign.
A value is fetched from a register with the index specified after the '%' sign.
For example, below code will increment a value located in local register 2:

\reflow{off}
\indent{4}
integer %2 local 42
iinc %2 local
\dedent{4}
\break
\reflow{on}
\section{end}

\heading{POINTER DEREFERENCE}
\section{begin}

Pointer dereference mode (identified by '*' sign) will fetch a value that is pointed to by the pointer
located in the register with the index specified after the '*' sign.
For example, below code will increment a value pointed to by the pointer in local register 2:

\reflow{off}
\indent{4}
integer %3 local 42
ptr %2 local %3 local
iinc *2 local
\dedent{4}
\break
\reflow{on}
\section{end}

\heading{REGISTER INDIRECT}
\section{begin}

Register indirect mode (identified by '@' sign) will fetch a value from a register with index specified by the
integer located in register with the index specified after the '@' sign.
For example, below code will increment a value in local register 2:

\reflow{off}
\indent{4}
integer %2 local 42
integer %3 local 2
iinc @3 local
\dedent{4}
\reflow{on}
\break

\section{end}
\section{end}

\heading{REGISTER ADDRESSING}
\section{begin}

To fetch or store a value in a register it needs to be addressed.
A proper register address consists of a fetch mode, a register index, and a register set.
For example:

\reflow{off}
\indent{4}
%1 local
*1 local
@1 local

%1 static
*1 static
@1 static

%1 global
*1 global
@1 global
\dedent{4}
\reflow{on}
\break

are all valid register addresses, conforming to the general syntax:
\break
<fetch-mode> <index> <register-set-specifier>

Mixing fetch modes and register sets in single instructions is allowed.
For exampe, this code:

\reflow{off}
\indent{4}
copy %1 static *1 local
\dedent{4}
\reflow{on}
\break

will copy a value dereferenced from a pointer located in local register 1 into static register 1.

\section{end}

%% INTRODUCTION
\section{end}
