{"status": "open", "open.author.name": "Marek Marecki", "open.author.email": "marejm@ozro.pw", "open.timestamp": 1500414482.647982, "message": "Add instruction-level coverage detection to kernel\n\nKernel can easily detect if an instruction at any particular\nindex has been executed or not.\nSuch metrics could later be translated into line-level, or\nexpression-level coverage.\n\nOne possible implementation would be to create a bit\nstring (initially filled with zeroes) where each bit would\nrepresent a single byte of a module (following the linear order\nof bytes in module's bytecode).\nWhen an instruction is executed the kernel enables the bit\nassociated with this instruction.\nIf at the end of the program any bit was left disabled, it\nwould mean that it's instruction was not executed.\nBits of data would of course stay disabled.\n\nThe disassembler would then take the bytecode executable, and\nthe coverage dump from the kernel; map enabled bits to\ninstructions, and annotate the disassembled source with\ninformation which instructions were, and which were not\nexecuted by the kernel.", "tags": ["reliability", "bechmarking", "testing", "enhancement", "instrumentation", "viuavm"], "milestones": [], "project.tag": "viuavm", "project.name": "Viua Virtual Machine"}