#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Wudoo Virtual Machine
\end_layout

\begin_layout Author
by Marek Marecki
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Overview
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
This section features a brief overview of the Wudoo VM; its history, development
 goals, influences and various other bits and pieces of information more
 or less related to the development of the idea and resulting code of the
 virtual machine.
 It is contains more prose and casual writing than technicalities.
 More technical discussion begins with Section
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Architecture"

\end_inset

.
 VM architecture is discussed in Part
\begin_inset CommandInset ref
LatexCommand vref
reference "part:Virtual-Machine"

\end_inset

.
 People who want to dive straight into code can start at Part
\begin_inset CommandInset ref
LatexCommand vref
reference "part:Programming"

\end_inset

.
\end_layout

\begin_layout Subsection
Compilation and dependencies
\end_layout

\begin_layout Standard
To compile Wudoo VM one need a C++11 capable compiler.
 Development is done on Linux machine with GCC 4.9.2.
 C++11 Standard Library is the only dependency of the VM.
 To compile the code, following command should be used:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make -j 8
\end_layout

\begin_layout Plain Layout

make test
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First command is used to compile assembler, CPU and bytecode analyzer.
 Second command is optional and can be used to verify if VM works correctly.
\end_layout

\begin_layout Subsection
History
\end_layout

\begin_layout Standard
Wudoo VM is a project that has been started during the Christmas break of
 2014, when I was still a student of Gdansk University of Technology.
 It was meant to be my reasearch project, and to help me understand how
 languages can be implemented and what really happends when I 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

 the programs I wrote.
\end_layout

\begin_layout Standard
As to why it has been started at all - I had taken interest in computer
 language design and implementation; lexers, parsers, virtual machines -
 the whole stack.
 The natural way for me was to take a book about the topic, start reading
 it, halfway through begin to implement things described and by the end
 of the book have a working prototype of a software.
 The book that gave me the confidence required to tackle the task of implementin
g a VM was 
\begin_inset Quotes eld
\end_inset

Language Implementation Patterns
\begin_inset Quotes erd
\end_inset

 by Terence Parr.
\end_layout

\begin_layout Standard
Apart from the above, I thought it would be just 
\begin_inset Quotes eld
\end_inset

cool
\begin_inset Quotes erd
\end_inset

 to have my own programming language.
\end_layout

\begin_layout Standard
As of February 2015, Wudoo VM can be programmed in simple assembly-lookalike
 language and cannot do much compared to mainstream languages.
 Add, subtract, multiply and divide two integers or floats, print a string
 to the screen, call a function (recursively or not).
 It supports separate compilation to some extent (by supporting static linking).
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Architecture
\begin_inset CommandInset label
LatexCommand label
name "sec:Architecture"

\end_inset


\end_layout

\begin_layout Standard
This section talks about VM's architecture.
\end_layout

\begin_layout Section
Instruction set
\end_layout

\begin_layout Standard
This section contains description of the VM's CPU instruction set.
 Each instruction is explained and its syntax is shown so readers can treat
 this section also as a reference for VM's assembly language.
\end_layout

\begin_layout Subsection
Integers
\end_layout

\begin_layout Subsection
Floats
\end_layout

\begin_layout Subsection
Casts
\end_layout

\begin_layout Subsection
Booleans
\end_layout

\begin_layout Subsection
Strings
\end_layout

\begin_layout Subsection
Control flow
\end_layout

\begin_layout Subsection
Functions
\end_layout

\begin_layout Subsection
Operations on registers
\end_layout

\begin_layout Subsection
IO
\end_layout

\begin_layout Subsection
Other instructions
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Virtual Machine
\begin_inset CommandInset label
LatexCommand label
name "part:Virtual-Machine"

\end_inset


\end_layout

\begin_layout Section
Register sets
\end_layout

\begin_layout Standard
Wudoo is a register-based virtual machine.
 It comes with several register sets, and each serves different purpose.
\end_layout

\begin_layout Subsection
Global
\end_layout

\begin_layout Standard
Global register set can be used to hold global variables.
 It can be accessed from all functions.
 Initial values in this register set's registers are set by 
\family typewriter
__entry
\family default
 function.
\end_layout

\begin_layout Subsection
Local
\end_layout

\begin_layout Standard
Local regster sets are uniqe to functions and cannot be accessed from outside
 of them.
 To be even more accurate - new local registers are created each time a
 function is called and live inside a call frame.
\end_layout

\begin_layout Subsection
Static
\end_layout

\begin_layout Standard
Static registers are unique to functions and cannot be accessed from outside
 of them.
 The difference between local registers is that they are created only the
 first time a function is called and are independent of call frames.
\end_layout

\begin_layout Subsection
Temporary
\end_layout

\begin_layout Standard
Temporary register set has only one register.
 It is used to move values between different register sets.
 In the future release, the number of registers in the temporary register
 set may be increased to allow performing simple operations inside it.
\end_layout

\begin_layout Section
Type system
\end_layout

\begin_layout Standard
This section talks about type system of Wudoo VM.
\end_layout

\begin_layout Section
Functions
\end_layout

\begin_layout Standard
Functions in Wudoo VM.
\end_layout

\begin_layout Section
Bytecode
\end_layout

\begin_layout Standard
This section talks about the bytecode used by Wudoo VM.
\end_layout

\begin_layout Subsection
Executable
\end_layout

\begin_layout Standard
This subsection discusses bytecode format used for executable files.
\end_layout

\begin_layout Subsection
Linkable
\end_layout

\begin_layout Standard
This section discusses bytecode format used for libraries.
 In Wudoo VM there is no difference between a static and dynamic libraries.
 In fact, a library can be linked statically or dynamically without any
 changes.
 The only difference is between linkable and executable bytecode.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Programming
\begin_inset CommandInset label
LatexCommand label
name "part:Programming"

\end_inset


\end_layout

\begin_layout Standard
This part describes how to write programs and run them on Wudoo VM.
 The language used in this part is custom assembly language created for
 the VM (it is also a target to which higher-level languages can be compiled).
\end_layout

\begin_layout Section
Structure
\end_layout

\begin_layout Standard
Every Wudoo VM program is a composed from a set of functions.
 In fact, each assembled file must contain at least one function.
\end_layout

\begin_layout Standard
If any instruction is found outside of a function it is gathered, and later
 all such instructions are insterted into an  
\family typewriter
__entry
\family default
 function that is the entry point of every program - CPU of the VM calls
 
\family typewriter
__entry
\family default
 function when told to start running.
 Programmer-written main function is then called by the 
\family typewriter
__entry
\family default
 function after every out-of-function instruction is executed in order in
 which they were gathered.
\end_layout

\begin_layout Standard
The only constraints placed on the main functions are:
\begin_inset CommandInset label
LatexCommand label
name "Main-function-constraints"

\end_inset


\end_layout

\begin_layout Itemize
main function must be defined,
\end_layout

\begin_layout Itemize
main function must return a value,
\end_layout

\begin_layout Standard
If these conditions are not met assembler rejects the code.
\end_layout

\begin_layout Standard
Name of the main function is irrelevant as long as it is set with 
\begin_inset Quotes eld
\end_inset


\family typewriter
.main:
\family default

\begin_inset Quotes eld
\end_inset

 assembler directive and points to a defined function (constraint #1) which
 returns a value (constraint #2).
 Name of the main function defaults to 
\begin_inset Quotes eld
\end_inset


\family typewriter
main
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Assembler directives
\end_layout

\begin_layout Standard
When programming in Wudoo VM assembly language, one not only uses instructions
 from the CPU instruction set but also directives of the assembler.
 These include things like markers, register names and functions.
\end_layout

\begin_layout Subsection
Defining functions
\end_layout

\begin_layout Standard
Functions are composed from CPU instructions wrapped in 
\family typewriter
.def
\family default
 and 
\family typewriter
.end
\family default
 directives.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.def: <function>
\end_layout

\begin_layout Plain Layout

    <instruction>+
\end_layout

\begin_layout Plain Layout

    end
\end_layout

\begin_layout Plain Layout

.end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every function should end with with the 
\family typewriter
end
\family default
 instruction.
 This is not a hard requirement, and can probably be used in a similar fashion
 to 
\family typewriter
case
\family default
's inside 
\family typewriter
switch
\family default
 that do end with 
\family typewriter
break
\family default
 because if the finishing end is omitted control will just flow into the
 function that is defined next (as it would to the next case inside a switch).
\end_layout

\begin_layout Subsection
Markers
\end_layout

\begin_layout Standard
Markers are designed as means to ease jumping to different places in code.
 They can be used in 
\family typewriter
jump
\family default
 and 
\family typewriter
branch
\family default
 instructions, as shown below (assembler checks for markers in places where
 an instruction index is expected).
 To set a marker 
\family typewriter
.mark:
\family default
 directive is used.
\end_layout

\begin_layout Standard
Markers are especially useful when imlementing loops.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.def: main 1
\end_layout

\begin_layout Plain Layout

	istore 1 42
\end_layout

\begin_layout Plain Layout

	jump :not_so_fast
\end_layout

\begin_layout Plain Layout

	istore 1 69
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	.mark: no_so_fast
\end_layout

\begin_layout Plain Layout

	print 1
\end_layout

\begin_layout Plain Layout

	izero 0
\end_layout

\begin_layout Plain Layout

	end
\end_layout

\begin_layout Plain Layout

.end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The syntax for setting a marker is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.mark: <marker_id>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Names (named registers)
\end_layout

\begin_layout Standard
Names can be assigned to registers to make programming in Wudoo VM's assembly
 language easier.
 Compare this code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.def: main 1
\end_layout

\begin_layout Plain Layout

	arg 0 1
\end_layout

\begin_layout Plain Layout

	; some code...
\end_layout

\begin_layout Plain Layout

	move 1 0
\end_layout

\begin_layout Plain Layout

	end
\end_layout

\begin_layout Plain Layout

.end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
to this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.def: main 1
\end_layout

\begin_layout Plain Layout

	arg 0 1
\end_layout

\begin_layout Plain Layout

	.name: 7 exit_code
\end_layout

\begin_layout Plain Layout

	; some code...
\end_layout

\begin_layout Plain Layout

	move exit_code 0
\end_layout

\begin_layout Plain Layout

	end
\end_layout

\begin_layout Plain Layout

.end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second example should be more self-explanatory than the first one.
 In the former listing it is unclear what is being returned (we can only
 guess it is 
\family typewriter
exit_code
\family default
) while in the latter on we immediately know what's going on.
\end_layout

\begin_layout Standard
The syntax for naming registers is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.name: <register_number> <name>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Alternative main function
\end_layout

\begin_layout Standard
Alternative main function may be set using .main: directive.
 Code in the following listing will not produce an error because the assembler
 knows that main function name is changed.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.def: nondefault_main_function 1
\end_layout

\begin_layout Plain Layout

	istore 1 42
\end_layout

\begin_layout Plain Layout

	print 1
\end_layout

\begin_layout Plain Layout

	izero 0
\end_layout

\begin_layout Plain Layout

	end
\end_layout

\begin_layout Plain Layout

.end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

.main: nondefault_main_function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternative main function must still meet all constraints mentioned in Section
\begin_inset CommandInset ref
LatexCommand vref
reference "Main-function-constraints"

\end_inset

.
\end_layout

\begin_layout Subsection
Static linking
\end_layout

\begin_layout Standard
Static linking is done during assembling, in linking phase.
 To indicate that a library should be linked 
\family typewriter
.link:
\family default
 directive is used.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.link: main.wlib
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The very short snippet above can actually assemble without a single warning,
 provided function named 
\family typewriter
main
\family default
 is defined in the 
\family typewriter
main.wlib
\family default
 library.
\end_layout

\begin_layout Standard
No special steps must be performed on the command line to assemble program
 that links external libraries.
 However, special steps are required when assembling a library - 
\family typewriter
--lib
\family default
 option must be passed to the assembler.
 This will ensure no error is thrown if no main function is found, and generate
 jump table (which is not present in the executable form of the bytecode).
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Standard
Sample programs that can be run on Wudoo VM.
\end_layout

\end_body
\end_document
